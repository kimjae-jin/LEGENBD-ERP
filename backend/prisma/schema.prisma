generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  projectId       String @id @default(cuid()) @map("project_id")
  projectName     String @map("project_name")
  projectCategory String @map("project_category")
  pmName          String @map("pm_name")
  projectLocation String @map("project_location")
  summary         String? @db.Text
  facilityType    String @map("facility_type")
  status          String @map("status")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  contracts             Contract[]
  participants          ProjectParticipant[]
  individualPerformances IndividualPerformance[]
  quotations            Quotation[]

  @@map("projects")
}

model Contract {
  contractId        String   @id @default(cuid()) @map("contract_id")
  projectId         String   @map("project_id")
  contractType      String   @map("contract_type")
  contractDate      DateTime @map("contract_date")
  startDate         DateTime @map("start_date")
  endDate           DateTime @map("end_date")
  totalAmount       Decimal  @map("total_amount")
  supplyAmount      Decimal  @map("supply_amount")
  vatAmount         Decimal  @map("vat_amount")
  totalEquityAmount Decimal  @map("total_equity_amount")
  equityRatio       Decimal  @map("equity_ratio")
  contractFileUrl   String?  @map("contract_file_url")
  remarks           String?  @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  project    Project            @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  revisions  ContractRevision[]
  invoices   Invoice[]

  @@map("contracts")
}

model ContractRevision {
  revisionId                 String   @id @default(cuid()) @map("revision_id")
  contractId                 String   @map("contract_id")
  revisionNumber             Int      @map("revision_number")
  revisionDate               DateTime @map("revision_date")
  revisedStartDate           DateTime? @map("revised_start_date")
  revisedEndDate             DateTime? @map("revised_end_date")
  finalEndDate               DateTime @map("final_end_date")
  revisedTotalAmount         Decimal  @map("revised_total_amount")
  revisedTotalEquityAmount   Decimal  @map("revised_total_equity_amount")
  revisedEquityRatio         Decimal  @map("revised_equity_ratio")
  changeReason               String   @db.Text @map("change_reason")
  revisionProofFileUrl       String?  @map("revision_proof_file_url")
  revisionContractFileUrl    String?  @map("revision_contract_file_url")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  contract Contract @relation(fields: [contractId], references: [contractId], onDelete: Cascade)

  @@map("contract_revisions")
}

model Client {
  clientId                        String  @id @default(cuid()) @map("client_id")
  businessRegistrationNumber      String  @unique @map("business_registration_number")
  corporateRegistrationNumber     String? @unique @map("corporate_registration_number")
  clientName                      String  @map("client_name")
  address                         String
  contactNumber                   String? @map("contact_number")
  businessRegistrationFileUrl     String? @map("business_registration_file_url")
  remarks                         String? @db.Text
  
  accountingContactName           String? @map("accounting_contact_name")
  accountingContactEmail          String? @map("accounting_contact_email")
  accountingContactPhone          String? @map("accounting_contact_phone")
  accountingContactBusinessCardUrl String? @map("accounting_contact_business_card_url")

  businessContactName             String? @map("business_contact_name")
  businessContactEmail            String? @map("business_contact_email")
  businessContactPhone            String? @map("business_contact_phone")
  businessContactBusinessCardUrl   String? @map("business_contact_business_card_url")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  invoices   Invoice[]

  @@map("clients")
}

model ProjectParticipant {
  participantId      String @id @default(cuid()) @map("participant_id")
  projectId          String @map("project_id")
  employeeId         String @map("employee_id")
  jobField           String @map("job_field")
  specialtyField     String @map("specialty_field")
  position           String
  responsibilities   String
  responsibilityLevel String @map("responsibility_level")
  specialNotes       String? @db.Text @map("special_notes")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  project  Project  @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
  employee Employee @relation(fields: [employeeId], references: [employeeId], onDelete: Restrict)

  @@map("project_participants")
}

model Invoice {
  invoiceId        String   @id @default(cuid()) @map("invoice_id")
  contractId       String   @map("contract_id")
  clientId         String   @map("client_id")
  invoiceContent   String   @map("invoice_content")
  invoiceAmount    Decimal  @map("invoice_amount")
  invoiceDate      DateTime @map("invoice_date")
  paymentDate      DateTime? @map("payment_date")
  paymentAmount    Decimal? @map("payment_amount")
  taxInvoiceDate   DateTime? @map("tax_invoice_date")
  taxInvoiceAmount Decimal? @map("tax_invoice_amount")
  specialNotes     String?  @db.Text @map("special_notes")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  contract Contract @relation(fields: [contractId], references: [contractId], onDelete: Cascade)
  client   Client   @relation(fields: [clientId], references: [clientId], onDelete: Restrict)

  @@map("invoices")
}

model Quotation {
  quotationId           String   @id @default(cuid()) @map("quotation_id")
  projectId             String   @map("project_id")
  quotationNumber       String   @unique @map("quotation_number")
  quotationContent      String   @db.Text @map("quotation_content")
  provisionalContractName String?  @map("provisional_contract_name")
  quotationAmount       Decimal  @map("quotation_amount")
  recipientName         String   @map("recipient_name")
  recipientContact      String?  @map("recipient_contact")
  recipientEmail        String?  @map("recipient_email")
  relatedDataFileUrl    String?  @map("related_data_file_url")
  remarks               String?  @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  project Project @relation(fields: [projectId], references: [projectId], onDelete: Cascade)

  @@map("quotations")
}

model Employee {
  employeeId                   String  @id @default(cuid()) @map("employee_id")
  employeeName                 String  @map("employee_name")
  residentRegistrationNumber   String  @unique @map("resident_registration_number")
  finalEducation               String? @map("final_education")
  finalEducationFileUrl        String? @map("final_education_file_url")
  koceaCareerDbId              String? @map("kocea_career_db_id")
  remarks                      String? @db.Text

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  qualifications         Qualification[]
  trainings              Training[]
  individualPerformances IndividualPerformance[]
  projectParticipations  ProjectParticipant[]

  @@map("employees")
}

model Qualification {
  qualificationId     String   @id @default(cuid()) @map("qualification_id")
  employeeId          String   @map("employee_id")
  qualificationName   String   @map("qualification_name")
  acquisitionDate     DateTime @map("acquisition_date")
  expirationDate      DateTime? @map("expiration_date")
  qualificationFileUrl String?  @map("qualification_file_url")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  employee Employee @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)

  @@map("qualifications")
}

model Training {
  trainingId        String   @id @default(cuid()) @map("training_id")
  employeeId        String   @map("employee_id")
  trainingName      String   @map("training_name")
  trainingDate      DateTime @map("training_date")
  trainingInstitution String @map("training_institution")
  requiredCycle     String?  @map("required_cycle")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  employee Employee @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)

  @@map("trainings")
}

model IndividualPerformance {
  performanceId      String @id @default(cuid()) @map("performance_id")
  employeeId         String @map("employee_id")
  projectId          String @map("project_id")
  performanceDetails String @db.Text @map("performance_details")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  employee Employee @relation(fields: [employeeId], references: [employeeId], onDelete: Cascade)
  project  Project  @relation(fields: [projectId], references: [projectId], onDelete: Cascade)

  @@map("individual_performances")
}

model License {
  licenseId           String   @id @default(cuid()) @map("license_id")
  licenseName         String   @unique @map("license_name")
  licenseNumber       String   @unique @map("license_number")
  issuingAuthority    String   @map("issuing_authority")
  acquisitionDate     DateTime @map("acquisition_date")
  renewalCycle        String?  @map("renewal_cycle")
  renewalDate         DateTime? @map("renewal_date")
  legalStandard       String?  @db.Text @map("legal_standard")
  appliedPersonnel    String?  @db.Text @map("applied_personnel")
  licenseProofFileUrl String?  @map("license_proof_file_url")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  equipment Equipment[]

  @@map("licenses")
}

model Equipment {
  equipmentId             String    @id @default(cuid()) @map("equipment_id")
  licenseId               String?   @map("license_id")
  equipmentName           String    @map("equipment_name")
  modelNumber             String?   @map("model_number")
  calibrationDate         DateTime? @map("calibration_date")
  nextCalibrationDate     DateTime? @map("next_calibration_date")
  calibrationCertificateUrl String? @map("calibration_certificate_url")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  license License? @relation(fields: [licenseId], references: [licenseId], onDelete: SetNull)

  @@map("equipment")
}
